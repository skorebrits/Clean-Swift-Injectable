//
//  CleanViewControllerViewControllerTests.swift
//  CleanTest
//
//  Created by Sander Korebrits on 03/06/2019.
//  Copyright (c) 2019 Sander Korebrits. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanInjectable
import XCTest

class CleanViewControllerViewControllerTests: XCTestCase{
    
    // MARK: Subject under test
    var sut: CleanViewController!
    var window: UIWindow!

    // MARK: Test lifecycle
    override func setUp(){
        super.setUp()
        window = UIWindow()
        setupCleanViewControllerViewController()
    }

    override func tearDown(){
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    func setupCleanViewControllerViewController(){
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "CleanViewController") as? CleanViewController
    }

    func loadView(){
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles
    class CleanViewControllerBusinessLogicSpy: CleanBusinessLogic {
        
        var listItemCalled = false

        func listItem(request: Clean.ListItem.Request){
            listItemCalled = true
        }
    }

    // MARK: Tests
    func testShouldDoSomethingWhenViewIsLoaded(){
        // Given
        let spy = CleanViewControllerBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.listItemCalled, "viewDidLoad() should ask the interactor to do something")
    }

    func testDisplaySomething(){
        // Given
        let viewModel = Clean.ListItem.ViewModel(label: "ViewController: Clean")

        // When
        loadView()
        sut.display(viewModel: viewModel)

        // Then
        XCTAssertEqual(sut.label.text, viewModel.label, "displaySomething(viewModel:) should update the name text field")
    }
}
