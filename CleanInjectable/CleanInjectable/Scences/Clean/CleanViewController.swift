//
//  CleanViewController.swift
//  CleanTest
//
//  Created by Sander Korebrits on 03/06/2019.
//  Copyright (c) 2019 Sander Korebrits. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CleanDisplayLogic: AnyObject {
    func display(viewModel: Clean.ListItem.ViewModel)
}

class CleanViewController: UIViewController, CleanDisplayLogic {
    
    var interactor: CleanBusinessLogic?
    var router: (NSObjectProtocol & CleanRoutingLogic & CleanDataPassing)?

    @IBOutlet weak var label: UILabel!
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        cleanSetup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        cleanSetup()
    }

    // MARK: Setup
    private func cleanSetup() {
        let viewController = self
        let interactor = CleanInteractor()
        let presenter = CleanPresenter()
        let router = CleanRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
          let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
          if let router = router, router.responds(to: selector) {
            router.perform(selector, with: segue)
          }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        listItem()
    }

    // MARK: Do something
    //@IBOutlet weak var nameTextField: UITextField!
    func listItem() {
        let request = Clean.ListItem.Request()
        interactor?.listItem(request: request)
    }

    func display(viewModel: Clean.ListItem.ViewModel) {
        label.text = viewModel.label
    }
}
